
#include "{{filename}}.h"

namespace {{namespace}} { 

{{#each records}}

{{name}}::{{name}}(QObject *parent): QObject(parent) { }

{{name}}::{{name}}(const {{name}} &other): {{#each properties}}
  m_{{name}}(other.{{name}}){{#unless @last}},{{/unless}}{{/each}} {

}

{{name}}::{{name}} &operator=(const {{name}} &other) {
  if (&other != this) {
{{#each properties}}
{{#if pointer}}
    m_{{name}}.swap(other.m_{{name}})
{{else}}
    m_{{name}} = other.m_{{name}};
{{/if}}
{{/each}}
  }

  return *this;
}

{{name}}::~{{name}} { }

// Properties
{{#each properties}}
{{! Gettters}}
{{#if pointer}}
std::shared_ptr<{{type}}> {{../name}}::{{name}}() const { return m_{{name}}; }
{{else if ref}}
{{{type}}} &{{../name}}::{{name}}() const { return m_{{name}}; }
{{else}}
{{{type}}} {{../name}}::{{name}}() const { return m_{{name}}; }
{{/if}}

{{! Setters}}
{{#if ref}}
void {{../name}}::set_{{name}}(const {{{type}}} &{{name}}) { 
    if (m_{{name}} == name) return;
    m_{{name}} = name;
    emit {{name}}Changed();
}
{{else if pointer}}
void {{../name}}::set_{{name}}(std::shared_ptr<{{{type}}}> {{name}} name) { 
  m_{{name}} = name;
}
{{else}}
void {{../name}}::set_{{name}}({{{type}}} {{name}}) { 
    if (m_{{name}} == name) return;
    m_{{name}} = name;
    emit {{name}}Changed();
 }
{{/if}}

{{/each}}

{{/each}}

}